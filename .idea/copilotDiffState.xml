<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/main/resources/sql/remove_mock_data.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main/resources/sql/remove_mock_data.sql" />
              <option name="updatedContent" value="-- remove_mock_data.sql&#10;-- Removes mock/sample data inserted for quick testing.&#10;-- Safe to run multiple times (idempotent).&#10;&#10;USE flight_management;&#10;&#10;-- 1) Remove bookings linked to sample passengers or sample flights&#10;DELETE b&#10;FROM bookings b&#10;LEFT JOIN users u ON b.user_id = u.user_id&#10;LEFT JOIN flights f ON b.flight_id = f.flight_id&#10;WHERE u.email IN ('alice@example.com')&#10;   OR f.flight_number IN ('FM100', 'FM200');&#10;&#10;-- 2) Remove sample flights&#10;DELETE FROM flights WHERE flight_number IN ('FM100', 'FM200');&#10;&#10;-- 3) Remove sample users (passenger and convenience admin)&#10;DELETE FROM users WHERE email IN ('alice@example.com', 'admin@flightmanagement.com');&#10;&#10;-- 4) Optionally reset AUTO_INCREMENT values to keep IDs compact (uncomment if desired)&#10;-- ALTER TABLE bookings AUTO_INCREMENT = 1;&#10;-- ALTER TABLE flights AUTO_INCREMENT = 1;&#10;-- ALTER TABLE users AUTO_INCREMENT = 1;&#10;&#10;-- 5) Show remaining counts for quick verification&#10;SELECT 'users' AS table_name, COUNT(*) AS rows FROM users;&#10;SELECT 'flights' AS table_name, COUNT(*) AS rows FROM flights;&#10;SELECT 'bookings' AS table_name, COUNT(*) AS rows FROM bookings;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main/resources/sql/schema.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main/resources/sql/schema.sql" />
              <option name="originalContent" value="-- filepath: main/resources/sql/schema.sql&#10;-- Schema for Airport Flight Management System&#10;&#10;CREATE DATABASE IF NOT EXISTS `flight_management` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;&#10;USE `flight_management`;&#10;&#10;-- Users table: passengers and admins&#10;CREATE TABLE IF NOT EXISTS users (&#10;  user_id INT PRIMARY KEY AUTO_INCREMENT,&#10;  name VARCHAR(100) NOT NULL,&#10;  email VARCHAR(150) NOT NULL UNIQUE,&#10;  password VARCHAR(500) NOT NULL,&#10;  passport_number VARCHAR(50),&#10;  contact_number VARCHAR(30),&#10;  role ENUM('PASSENGER','ADMIN') NOT NULL DEFAULT 'PASSENGER'&#10;) ENGINE=InnoDB;&#10;&#10;-- Flights table&#10;CREATE TABLE IF NOT EXISTS flights (&#10;  flight_id INT PRIMARY KEY AUTO_INCREMENT,&#10;  flight_number VARCHAR(50),&#10;  flight_name VARCHAR(150),&#10;  source VARCHAR(80),&#10;  destination VARCHAR(80),&#10;  departure_time DATETIME,&#10;  arrival_time DATETIME,&#10;  seat_capacity INT DEFAULT 100,&#10;  available_seats INT DEFAULT 100,&#10;  price DECIMAL(10,2) DEFAULT 0.00,&#10;  status VARCHAR(20) DEFAULT 'SCHEDULED'&#10;) ENGINE=InnoDB;&#10;&#10;-- Bookings table&#10;CREATE TABLE IF NOT EXISTS bookings (&#10;  booking_id INT PRIMARY KEY AUTO_INCREMENT,&#10;  user_id INT NOT NULL,&#10;  flight_id INT NOT NULL,&#10;  booking_date DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  status VARCHAR(20) DEFAULT 'CONFIRMED',&#10;  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,&#10;  FOREIGN KEY (flight_id) REFERENCES flights(flight_id) ON DELETE CASCADE&#10;) ENGINE=InnoDB;&#10;&#10;" />
              <option name="updatedContent" value="-- filepath: main/resources/sql/schema.sql&#10;-- Schema for Airport Flight Management System&#10;&#10;CREATE DATABASE IF NOT EXISTS `flight_management` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;&#10;USE `flight_management`;&#10;&#10;-- Users table: passengers and admins&#10;CREATE TABLE IF NOT EXISTS users (&#10;  user_id INT PRIMARY KEY AUTO_INCREMENT,&#10;  name VARCHAR(100) NOT NULL,&#10;  email VARCHAR(150) NOT NULL UNIQUE,&#10;  password VARCHAR(500) NOT NULL,&#10;  passport_number VARCHAR(50),&#10;  contact_number VARCHAR(30),&#10;  role ENUM('PASSENGER','ADMIN') NOT NULL DEFAULT 'PASSENGER',&#10;  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP&#10;) ENGINE=InnoDB;&#10;&#10;-- Flights table&#10;CREATE TABLE IF NOT EXISTS flights (&#10;  flight_id INT PRIMARY KEY AUTO_INCREMENT,&#10;  flight_number VARCHAR(50),&#10;  flight_name VARCHAR(150),&#10;  source VARCHAR(80),&#10;  destination VARCHAR(80),&#10;  departure_time DATETIME,&#10;  arrival_time DATETIME,&#10;  seat_capacity INT DEFAULT 100,&#10;  available_seats INT DEFAULT 100,&#10;  price DECIMAL(10,2) DEFAULT 0.00,&#10;  status VARCHAR(20) DEFAULT 'SCHEDULED',&#10;  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;  updated_at TIMESTAMP NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP&#10;) ENGINE=InnoDB;&#10;&#10;-- Bookings table&#10;CREATE TABLE IF NOT EXISTS bookings (&#10;  booking_id INT PRIMARY KEY AUTO_INCREMENT,&#10;  user_id INT NOT NULL,&#10;  flight_id INT NOT NULL,&#10;  booking_date DATETIME DEFAULT CURRENT_TIMESTAMP,&#10;  status VARCHAR(20) DEFAULT 'CONFIRMED',&#10;  food_preference VARCHAR(50) DEFAULT NULL,&#10;  seat_preference ENUM('WINDOW','AISLE','MIDDLE') DEFAULT NULL,&#10;  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;  FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,&#10;  FOREIGN KEY (flight_id) REFERENCES flights(flight_id) ON DELETE CASCADE&#10;) ENGINE=InnoDB;&#10;&#10;CREATE INDEX idx_users_email ON users(email);&#10;CREATE INDEX idx_flights_route ON flights(source, destination);&#10;CREATE INDEX idx_bookings_user ON bookings(user_id);&#10;CREATE INDEX idx_bookings_flight ON bookings(flight_id);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main/resources/sql/seat_assignment.sql">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main/resources/sql/seat_assignment.sql" />
              <option name="updatedContent" value="-- seat_assignment.sql&#10;-- Adds seat assignment support to the flight management DB.&#10;-- Run this in MySQL Workbench or mysql CLI after applying schema.sql.&#10;&#10;USE flight_management;&#10;&#10;-- 1) Add seat_number column to bookings (if not present)&#10;ALTER TABLE bookings ADD COLUMN IF NOT EXISTS seat_number VARCHAR(10) DEFAULT NULL;&#10;&#10;-- 2) Create flight_seats table to track each seat on every flight&#10;CREATE TABLE IF NOT EXISTS flight_seats (&#10;  seat_id INT PRIMARY KEY AUTO_INCREMENT,&#10;  flight_id INT NOT NULL,&#10;  seat_number VARCHAR(10) NOT NULL,&#10;  seat_type ENUM('WINDOW','AISLE','MIDDLE') NOT NULL,&#10;  is_available TINYINT(1) DEFAULT 1,&#10;  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,&#10;  FOREIGN KEY (flight_id) REFERENCES flights(flight_id) ON DELETE CASCADE,&#10;  UNIQUE KEY ux_flight_seat (flight_id, seat_number)&#10;) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;&#10;&#10;-- 3) Stored procedure to generate seats for a given flight&#10;-- Usage: CALL create_seats_for_flight(FLIGHT_ID, SEAT_CAPACITY);&#10;DELIMITER $$&#10;DROP PROCEDURE IF EXISTS create_seats_for_flight$$&#10;CREATE PROCEDURE create_seats_for_flight(IN fid INT, IN capacity INT)&#10;BEGIN&#10;  DECLARE row INT DEFAULT 1;&#10;  DECLARE col INT DEFAULT 0;&#10;  DECLARE inserted INT DEFAULT 0;&#10;  DECLARE seatLabel CHAR(3);&#10;  DECLARE letters CHAR(6) DEFAULT 'ABCDEF';&#10;&#10;  IF capacity &lt;= 0 THEN&#10;    LEAVE create_seats_for_flight;&#10;  END IF;&#10;&#10;  SET inserted = 0;&#10;  SET row = 1;&#10;  WHILE inserted &lt; capacity DO&#10;    SET col = 1;&#10;    WHILE col &lt;= 6 AND inserted &lt; capacity DO&#10;      SET seatLabel = CONCAT(row, SUBSTRING(letters, col, 1));&#10;      -- Determine seat type: A/F WINDOW, C/D AISLE, B/E MIDDLE&#10;      CASE SUBSTRING(letters, col, 1)&#10;        WHEN 'A' THEN INSERT IGNORE INTO flight_seats(flight_id, seat_number, seat_type) VALUES (fid, seatLabel, 'WINDOW');&#10;        WHEN 'F' THEN INSERT IGNORE INTO flight_seats(flight_id, seat_number, seat_type) VALUES (fid, seatLabel, 'WINDOW');&#10;        WHEN 'C' THEN INSERT IGNORE INTO flight_seats(flight_id, seat_number, seat_type) VALUES (fid, seatLabel, 'AISLE');&#10;        WHEN 'D' THEN INSERT IGNORE INTO flight_seats(flight_id, seat_number, seat_type) VALUES (fid, seatLabel, 'AISLE');&#10;        WHEN 'B' THEN INSERT IGNORE INTO flight_seats(flight_id, seat_number, seat_type) VALUES (fid, seatLabel, 'MIDDLE');&#10;        WHEN 'E' THEN INSERT IGNORE INTO flight_seats(flight_id, seat_number, seat_type) VALUES (fid, seatLabel, 'MIDDLE');&#10;        ELSE INSERT IGNORE INTO flight_seats(flight_id, seat_number, seat_type) VALUES (fid, seatLabel, 'MIDDLE');&#10;      END CASE;&#10;      SET inserted = inserted + 1;&#10;      SET col = col + 1;&#10;    END WHILE;&#10;    SET row = row + 1;&#10;  END WHILE;&#10;END$$&#10;DELIMITER ;&#10;&#10;-- 4) Example: generate seats for all existing flights using their seat_capacity&#10;-- This will call the procedure for each flight. Uncomment to run.&#10;-- Note: for large datasets you might want to run per-flight manually.&#10;&#10;-- SELECT CONCAT('CALL create_seats_for_flight(', flight_id, ',', COALESCE(seat_capacity, 120), ');') FROM flights;&#10;&#10;-- To generate seats for a specific flight, run:&#10;-- CALL create_seats_for_flight(1, 120);&#10;&#10;-- 5) Quick checks&#10;SELECT COUNT(*) AS total_flight_seats FROM flight_seats;&#10;SELECT COUNT(*) AS bookings_with_seatnum FROM bookings WHERE seat_number IS NOT NULL;&#10;&#10;-- End of file&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flightmanagement/Booking.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flightmanagement/Booking.java" />
              <option name="originalContent" value="package flightmanagement;&#10;&#10;public class Booking {&#10;    private int bookingId;&#10;    private int userId;&#10;    private int flightId;&#10;    private String bookingDate;&#10;    private String status; // CONFIRMED, CANCELLED&#10;&#10;    public Booking(int bookingId, int userId, int flightId, String bookingDate, String status) {&#10;        this.bookingId = bookingId;&#10;        this.userId = userId;&#10;        this.flightId = flightId;&#10;        this.bookingDate = bookingDate;&#10;        this.status = status;&#10;    }&#10;&#10;    public Booking(int userId, int flightId, String bookingDate) {&#10;        this.userId = userId;&#10;        this.flightId = flightId;&#10;        this.bookingDate = bookingDate;&#10;        this.status = &quot;CONFIRMED&quot;;&#10;    }&#10;&#10;    public int getBookingId() { return bookingId; }&#10;    public int getUserId() { return userId; }&#10;    public int getFlightId() { return flightId; }&#10;    public String getBookingDate() { return bookingDate; }&#10;    public String getStatus() { return status; }&#10;&#10;    public void displayShort() {&#10;        System.out.println(ConsoleColors.MAGENTA + &quot;️ Booking ID: &quot; + bookingId + &quot; | Flight: &quot; + flightId + &quot; | User: &quot; + userId + &quot; | &quot; + bookingDate + &quot; | &quot; + status + ConsoleColors.RESET);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package flightmanagement;&#10;&#10;public class Booking {&#10;    private int bookingId;&#10;    private int userId;&#10;    private int flightId;&#10;    private String bookingDate;&#10;    private String status; // CONFIRMED, CANCELLED&#10;    private String foodPreference; // e.g., Vegetarian, Non-Veg, Vegan&#10;    private String seatPreference; // WINDOW, AISLE, MIDDLE&#10;    private String seatNumber; // e.g., 12A&#10;&#10;    // Flight-related details (for display convenience)&#10;    private String flightNumber;&#10;    private String flightName;&#10;    private String source;&#10;    private String destination;&#10;    private String departureTime;&#10;    private String arrivalTime;&#10;    private double price;&#10;&#10;    // Constructor used when loading full booking+flight info&#10;    public Booking(int bookingId, int userId, int flightId, String bookingDate, String status, String foodPreference, String seatPreference, String seatNumber, String flightNumber, String flightName, String source, String destination, String departureTime, String arrivalTime, double price) {&#10;        this.bookingId = bookingId;&#10;        this.userId = userId;&#10;        this.flightId = flightId;&#10;        this.bookingDate = bookingDate;&#10;        this.status = status;&#10;        this.foodPreference = foodPreference;&#10;        this.seatPreference = seatPreference;&#10;        this.seatNumber = seatNumber;&#10;        this.flightNumber = flightNumber;&#10;        this.flightName = flightName;&#10;        this.source = source;&#10;        this.destination = destination;&#10;        this.departureTime = departureTime;&#10;        this.arrivalTime = arrivalTime;&#10;        this.price = price;&#10;    }&#10;&#10;    // Lightweight constructor when only basic data is available&#10;    public Booking(int userId, int flightId, String bookingDate) {&#10;        this.userId = userId;&#10;        this.flightId = flightId;&#10;        this.bookingDate = bookingDate;&#10;        this.status = &quot;CONFIRMED&quot;;&#10;    }&#10;&#10;    public int getBookingId() { return bookingId; }&#10;    public int getUserId() { return userId; }&#10;    public int getFlightId() { return flightId; }&#10;    public String getBookingDate() { return bookingDate; }&#10;    public String getStatus() { return status; }&#10;    public String getFoodPreference() { return foodPreference; }&#10;    public String getSeatPreference() { return seatPreference; }&#10;    public String getSeatNumber() { return seatNumber; }&#10;&#10;    public String getFlightNumber() { return flightNumber; }&#10;    public String getFlightName() { return flightName; }&#10;    public String getSource() { return source; }&#10;    public String getDestination() { return destination; }&#10;    public String getDepartureTime() { return departureTime; }&#10;    public String getArrivalTime() { return arrivalTime; }&#10;    public double getPrice() { return price; }&#10;&#10;    public void displayShort() {&#10;        System.out.println(ConsoleColors.MAGENTA + &quot;️ Booking ID: &quot; + bookingId + &quot; | Flight: &quot; + (flightNumber == null ? flightName : flightNumber + &quot; - &quot; + flightName) + &quot; | &quot; + source + &quot; -&gt; &quot; + destination + &quot; | Departs: &quot; + departureTime + &quot; | Status: &quot; + status + ConsoleColors.RESET);&#10;        if (seatNumber != null) System.out.println(ConsoleColors.CYAN + &quot;    Seat: &quot; + seatNumber + &quot; (&quot; + (seatPreference == null ? &quot;No preference&quot; : seatPreference) + &quot;)&quot; + ConsoleColors.RESET);&#10;        if (foodPreference != null) System.out.println(ConsoleColors.CYAN + &quot;    Food preference: &quot; + foodPreference + ConsoleColors.RESET);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flightmanagement/BookingService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flightmanagement/BookingService.java" />
              <option name="originalContent" value="package flightmanagement;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class BookingService {&#10;&#10;    // Add a flight to the database&#10;    public boolean addFlight(Flight f) {&#10;        String sql = &quot;INSERT INTO flights (flight_number, flight_name, source, destination, departure_time, arrival_time, seat_capacity, available_seats, price, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to add flight: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, f.getFlightNumber());&#10;            ps.setString(2, f.getName());&#10;            ps.setString(3, f.getSource());&#10;            ps.setString(4, f.getDestination());&#10;            ps.setString(5, f.getDepartureTime());&#10;            ps.setString(6, f.getArrivalTime());&#10;            ps.setInt(7, f.getSeatCapacity());&#10;            ps.setInt(8, f.getAvailableSeats());&#10;            ps.setDouble(9, f.getPrice());&#10;            ps.setString(10, f.getStatus());&#10;            ps.executeUpdate();&#10;            System.out.println(ConsoleColors.GREEN + &quot; Flight added successfully!&quot; + ConsoleColors.RESET);&#10;            return true;&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to add flight: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    public boolean updateFlightDetails(Flight f) {&#10;        String sql = &quot;UPDATE flights SET flight_number = ?, flight_name = ?, source = ?, destination = ?, departure_time = ?, arrival_time = ?, seat_capacity = ?, available_seats = ?, price = ?, status = ? WHERE flight_id = ?&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to update flight: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, f.getFlightNumber());&#10;            ps.setString(2, f.getName());&#10;            ps.setString(3, f.getSource());&#10;            ps.setString(4, f.getDestination());&#10;            ps.setString(5, f.getDepartureTime());&#10;            ps.setString(6, f.getArrivalTime());&#10;            ps.setInt(7, f.getSeatCapacity());&#10;            ps.setInt(8, f.getAvailableSeats());&#10;            ps.setDouble(9, f.getPrice());&#10;            ps.setString(10, f.getStatus());&#10;            ps.setInt(11, f.getFlightId());&#10;            int updated = ps.executeUpdate();&#10;            if (updated &gt; 0) {&#10;                System.out.println(ConsoleColors.YELLOW + &quot;⚙️ Flight updated successfully.&quot; + ConsoleColors.RESET);&#10;                return true;&#10;            } else {&#10;                System.out.println(ConsoleColors.RED + &quot;❌ Flight not found.&quot; + ConsoleColors.RESET);&#10;                return false;&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to update flight: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    public boolean cancelFlight(int flightId) {&#10;        String sql = &quot;UPDATE flights SET status = 'CANCELLED' WHERE flight_id = ?&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel flight: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;            ps.setInt(1, flightId);&#10;            int updated = ps.executeUpdate();&#10;            if (updated &gt; 0) {&#10;                System.out.println(ConsoleColors.YELLOW + &quot;❌ Flight cancelled.&quot; + ConsoleColors.RESET);&#10;                return true;&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel flight: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return false;&#10;    }&#10;&#10;    // View flights&#10;    public void viewFlights() {&#10;        String sql = &quot;SELECT flight_id, flight_number, flight_name, source, destination, departure_time, arrival_time, available_seats, price, status FROM flights WHERE status &lt;&gt; 'CANCELLED'&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch flights: no DB connection&quot; + ConsoleColors.RESET);&#10;            return;&#10;        }&#10;        try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {&#10;            System.out.println(ConsoleColors.CYAN + &quot;\n--- Available Flights ---&quot; + ConsoleColors.RESET);&#10;            while (rs.next()) {&#10;                int id = rs.getInt(&quot;flight_id&quot;);&#10;                String number = rs.getString(&quot;flight_number&quot;);&#10;                String name = rs.getString(&quot;flight_name&quot;);&#10;                String src = rs.getString(&quot;source&quot;);&#10;                String dest = rs.getString(&quot;destination&quot;);&#10;                String dep = rs.getString(&quot;departure_time&quot;);&#10;                String price = String.valueOf(rs.getDouble(&quot;price&quot;));&#10;                int seats = rs.getInt(&quot;available_seats&quot;);&#10;                String status = rs.getString(&quot;status&quot;);&#10;                System.out.println(ConsoleColors.BLUE + id + &quot; | &quot; + (number == null ? name : number + &quot; - &quot; + name) + &quot; | &quot; + src + &quot; -&gt; &quot; + dest + &quot; | &quot; + dep + &quot; | ₹&quot; + price + &quot; | Seats: &quot; + seats + &quot; | &quot; + status + ConsoleColors.RESET);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch flights: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    // Create booking with transactional seat decrement&#10;    public boolean createBooking(int userId, int flightId) {&#10;        String updateSeats = &quot;UPDATE flights SET available_seats = available_seats - 1 WHERE flight_id = ?&quot;;&#10;        String insertBooking = &quot;INSERT INTO bookings (user_id, flight_id, booking_date, status) VALUES (?, ?, NOW(), 'CONFIRMED')&quot;;&#10;&#10;        Connection con = null;&#10;        try {&#10;            con = DatabaseConnection.getConnection();&#10;            if (con == null) return false;&#10;            con.setAutoCommit(false);&#10;&#10;            try (PreparedStatement ps = con.prepareStatement(&quot;SELECT available_seats, status FROM flights WHERE flight_id = ?&quot;)) {&#10;                ps.setInt(1, flightId);&#10;                try (ResultSet rs = ps.executeQuery()) {&#10;                    if (!rs.next()) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ Flight not found.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    int seats = rs.getInt(&quot;available_seats&quot;);&#10;                    String status = rs.getString(&quot;status&quot;);&#10;                    if (!&quot;SCHEDULED&quot;.equalsIgnoreCase(status)) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ Flight is not available for booking (status=&quot; + status + &quot;).&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    if (seats &lt;= 0) {&#10;                        System.out.println(ConsoleColors.YELLOW + &quot;⚠️ No seats available.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;&#10;            try (PreparedStatement ups = con.prepareStatement(updateSeats)) {&#10;                ups.setInt(1, flightId);&#10;                ups.executeUpdate();&#10;            }&#10;&#10;            try (PreparedStatement ins = con.prepareStatement(insertBooking, Statement.RETURN_GENERATED_KEYS)) {&#10;                ins.setInt(1, userId);&#10;                ins.setInt(2, flightId);&#10;                ins.executeUpdate();&#10;                try (ResultSet keys = ins.getGeneratedKeys()) {&#10;                    if (keys.next()) {&#10;                        int bookingId = keys.getInt(1);&#10;                        System.out.println(ConsoleColors.MAGENTA + &quot;️ Booking confirmed! ID: &quot; + bookingId + ConsoleColors.RESET);&#10;                    }&#10;                }&#10;            }&#10;&#10;            con.commit();&#10;            return true;&#10;        } catch (Exception e) {&#10;            try { if (con != null) con.rollback(); } catch (Exception ignored) {}&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Booking failed: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            try { if (con != null) con.setAutoCommit(true); } catch (Exception ignored) {}&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    // Cancel booking by user (ensure ownership)&#10;    public boolean cancelBooking(int bookingId, int userId) {&#10;        String selectSql = &quot;SELECT booking_id, user_id, flight_id, status FROM bookings WHERE booking_id = ?&quot;;&#10;        String updateBooking = &quot;UPDATE bookings SET status = 'CANCELLED' WHERE booking_id = ?&quot;;&#10;        String incrementSeat = &quot;UPDATE flights SET available_seats = available_seats + 1 WHERE flight_id = ?&quot;;&#10;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel booking: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try {&#10;            con.setAutoCommit(false);&#10;&#10;            int flightId;&#10;            try (PreparedStatement ps = con.prepareStatement(selectSql)) {&#10;                ps.setInt(1, bookingId);&#10;                try (ResultSet rs = ps.executeQuery()) {&#10;                    if (!rs.next()) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ Booking not found.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    int owner = rs.getInt(&quot;user_id&quot;);&#10;                    if (owner != userId) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ You are not authorized to cancel this booking.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    String status = rs.getString(&quot;status&quot;);&#10;                    flightId = rs.getInt(&quot;flight_id&quot;);&#10;                    if (&quot;CANCELLED&quot;.equalsIgnoreCase(status)) {&#10;                        System.out.println(ConsoleColors.YELLOW + &quot;⚠️ Booking already cancelled.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;&#10;            try (PreparedStatement ups = con.prepareStatement(updateBooking)) {&#10;                ups.setInt(1, bookingId);&#10;                ups.executeUpdate();&#10;            }&#10;&#10;            try (PreparedStatement inc = con.prepareStatement(incrementSeat)) {&#10;                inc.setInt(1, flightId);&#10;                inc.executeUpdate();&#10;            }&#10;&#10;            con.commit();&#10;            System.out.println(ConsoleColors.GREEN + &quot;✅ Booking cancelled and seat released.&quot; + ConsoleColors.RESET);&#10;            return true;&#10;        } catch (Exception e) {&#10;            try { con.rollback(); } catch (Exception ignored) {}&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel booking: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            try { con.setAutoCommit(true); } catch (Exception ignored) {}&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    public List&lt;Booking&gt; getBookingsByUser(int userId) {&#10;        List&lt;Booking&gt; out = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT booking_id, user_id, flight_id, booking_date, status FROM bookings WHERE user_id = ?&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch bookings: no DB connection&quot; + ConsoleColors.RESET);&#10;            return out;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;            ps.setInt(1, userId);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    Booking b = new Booking(rs.getInt(&quot;booking_id&quot;), rs.getInt(&quot;user_id&quot;), rs.getInt(&quot;flight_id&quot;), rs.getString(&quot;booking_date&quot;), rs.getString(&quot;status&quot;));&#10;                    out.add(b);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch bookings: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return out;&#10;    }&#10;&#10;    public List&lt;Booking&gt; getAllBookings() {&#10;        List&lt;Booking&gt; out = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT booking_id, user_id, flight_id, booking_date, status FROM bookings&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch all bookings: no DB connection&quot; + ConsoleColors.RESET);&#10;            return out;&#10;        }&#10;        try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {&#10;            while (rs.next()) {&#10;                Booking b = new Booking(rs.getInt(&quot;booking_id&quot;), rs.getInt(&quot;user_id&quot;), rs.getInt(&quot;flight_id&quot;), rs.getString(&quot;booking_date&quot;), rs.getString(&quot;status&quot;));&#10;                out.add(b);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch all bookings: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return out;&#10;    }&#10;&#10;    public List&lt;Passenger&gt; getAllPassengers() {&#10;        List&lt;Passenger&gt; out = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT user_id, name, email, passport_number, contact_number FROM users WHERE role = 'PASSENGER'&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch passengers: no DB connection&quot; + ConsoleColors.RESET);&#10;            return out;&#10;        }&#10;        try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {&#10;            while (rs.next()) {&#10;                Passenger p = new Passenger(rs.getInt(&quot;user_id&quot;), rs.getString(&quot;name&quot;), rs.getString(&quot;email&quot;), rs.getString(&quot;passport_number&quot;), rs.getString(&quot;contact_number&quot;));&#10;                out.add(p);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch passengers: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return out;&#10;    }&#10;&#10;    public void generateReport() {&#10;        String sqlFlights = &quot;SELECT COUNT(*) AS cnt FROM flights&quot;;&#10;        String sqlPassengers = &quot;SELECT COUNT(*) AS cnt FROM users WHERE role = 'PASSENGER'&quot;;&#10;        String sqlBookings = &quot;SELECT COUNT(*) AS cnt FROM bookings&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to generate report: no DB connection&quot; + ConsoleColors.RESET);&#10;            return;&#10;        }&#10;        try (Statement st = con.createStatement()) {&#10;            try (ResultSet rf = st.executeQuery(sqlFlights)) { if (rf.next()) System.out.println(ConsoleColors.MAGENTA + &quot; Total Flights = &quot; + rf.getInt(&quot;cnt&quot;) + ConsoleColors.RESET); }&#10;            try (ResultSet ru = st.executeQuery(sqlPassengers)) { if (ru.next()) System.out.println(ConsoleColors.MAGENTA + &quot; Total Passengers = &quot; + ru.getInt(&quot;cnt&quot;) + ConsoleColors.RESET); }&#10;            try (ResultSet rb = st.executeQuery(sqlBookings)) { if (rb.next()) System.out.println(ConsoleColors.MAGENTA + &quot; Total Bookings = &quot; + rb.getInt(&quot;cnt&quot;) + ConsoleColors.RESET); }&#10;            System.out.println(ConsoleColors.GREEN + &quot; Report generated successfully!&quot; + ConsoleColors.RESET);&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to generate report: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package flightmanagement;&#10;&#10;import java.sql.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class BookingService {&#10;&#10;    // Add a flight to the database&#10;    public boolean addFlight(Flight f) {&#10;        String sql = &quot;INSERT INTO flights (flight_number, flight_name, source, destination, departure_time, arrival_time, seat_capacity, available_seats, price, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to add flight: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;            ps.setString(1, f.getFlightNumber());&#10;            ps.setString(2, f.getName());&#10;            ps.setString(3, f.getSource());&#10;            ps.setString(4, f.getDestination());&#10;            ps.setString(5, f.getDepartureTime());&#10;            ps.setString(6, f.getArrivalTime());&#10;            ps.setInt(7, f.getSeatCapacity());&#10;            ps.setInt(8, f.getAvailableSeats());&#10;            ps.setDouble(9, f.getPrice());&#10;            ps.setString(10, f.getStatus());&#10;            ps.executeUpdate();&#10;&#10;            // Optionally create seats for this flight by calling stored procedure (if exists)&#10;            try (ResultSet keys = ps.getGeneratedKeys()) {&#10;                if (keys.next()) {&#10;                    int flightId = keys.getInt(1);&#10;                    // Try to call create_seats_for_flight if present (safe to ignore errors)&#10;                    try (Statement st = con.createStatement()) {&#10;                        st.execute(&quot;CALL create_seats_for_flight(&quot; + flightId + &quot;, &quot; + f.getSeatCapacity() + &quot;);&quot;);&#10;                    } catch (Exception ignored) {}&#10;                }&#10;            }&#10;&#10;            System.out.println(ConsoleColors.GREEN + &quot; Flight added successfully!&quot; + ConsoleColors.RESET);&#10;            return true;&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to add flight: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    public boolean updateFlightDetails(Flight f) {&#10;        String sql = &quot;UPDATE flights SET flight_number = ?, flight_name = ?, source = ?, destination = ?, departure_time = ?, arrival_time = ?, seat_capacity = ?, available_seats = ?, price = ?, status = ? WHERE flight_id = ?&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to update flight: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;            ps.setString(1, f.getFlightNumber());&#10;            ps.setString(2, f.getName());&#10;            ps.setString(3, f.getSource());&#10;            ps.setString(4, f.getDestination());&#10;            ps.setString(5, f.getDepartureTime());&#10;            ps.setString(6, f.getArrivalTime());&#10;            ps.setInt(7, f.getSeatCapacity());&#10;            ps.setInt(8, f.getAvailableSeats());&#10;            ps.setDouble(9, f.getPrice());&#10;            ps.setString(10, f.getStatus());&#10;            ps.setInt(11, f.getFlightId());&#10;            int updated = ps.executeUpdate();&#10;            if (updated &gt; 0) {&#10;                System.out.println(ConsoleColors.YELLOW + &quot;⚙️ Flight updated successfully.&quot; + ConsoleColors.RESET);&#10;                return true;&#10;            } else {&#10;                System.out.println(ConsoleColors.RED + &quot;❌ Flight not found.&quot; + ConsoleColors.RESET);&#10;                return false;&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to update flight: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    public boolean cancelFlight(int flightId) {&#10;        String sql = &quot;UPDATE flights SET status = 'CANCELLED' WHERE flight_id = ?&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel flight: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;            ps.setInt(1, flightId);&#10;            int updated = ps.executeUpdate();&#10;            if (updated &gt; 0) {&#10;                System.out.println(ConsoleColors.YELLOW + &quot;❌ Flight cancelled.&quot; + ConsoleColors.RESET);&#10;                return true;&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel flight: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return false;&#10;    }&#10;&#10;    // View flights&#10;    public void viewFlights() {&#10;        String sql = &quot;SELECT flight_id, flight_number, flight_name, source, destination, departure_time, arrival_time, available_seats, price, status FROM flights WHERE status &lt;&gt; 'CANCELLED'&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch flights: no DB connection&quot; + ConsoleColors.RESET);&#10;            return;&#10;        }&#10;        try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {&#10;            System.out.println(ConsoleColors.CYAN + &quot;\n--- Available Flights ---&quot; + ConsoleColors.RESET);&#10;            while (rs.next()) {&#10;                int id = rs.getInt(&quot;flight_id&quot;);&#10;                String number = rs.getString(&quot;flight_number&quot;);&#10;                String name = rs.getString(&quot;flight_name&quot;);&#10;                String src = rs.getString(&quot;source&quot;);&#10;                String dest = rs.getString(&quot;destination&quot;);&#10;                String dep = rs.getString(&quot;departure_time&quot;);&#10;                String price = String.valueOf(rs.getDouble(&quot;price&quot;));&#10;                int seats = rs.getInt(&quot;available_seats&quot;);&#10;                String status = rs.getString(&quot;status&quot;);&#10;                System.out.println(ConsoleColors.BLUE + id + &quot; | &quot; + (number == null ? name : number + &quot; - &quot; + name) + &quot; | &quot; + src + &quot; -&gt; &quot; + dest + &quot; | &quot; + dep + &quot; | ₹&quot; + price + &quot; | Seats: &quot; + seats + &quot; | &quot; + status + ConsoleColors.RESET);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch flights: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    // Create booking with transactional seat allocation, seat and food preferences&#10;    public boolean createBooking(int userId, int flightId, String foodPreference, String seatPreference) {&#10;        String selectFlightSql = &quot;SELECT available_seats, status FROM flights WHERE flight_id = ?&quot;;&#10;        String allocateSeatSqlPreferred = &quot;SELECT seat_number FROM flight_seats WHERE flight_id = ? AND is_available = 1 AND seat_type = ? ORDER BY seat_id LIMIT 1 FOR UPDATE&quot;;&#10;        String allocateSeatSqlAny = &quot;SELECT seat_number FROM flight_seats WHERE flight_id = ? AND is_available = 1 ORDER BY seat_id LIMIT 1 FOR UPDATE&quot;;&#10;        String markSeatTakenSql = &quot;UPDATE flight_seats SET is_available = 0 WHERE flight_id = ? AND seat_number = ?&quot;;&#10;        String decrementSeats = &quot;UPDATE flights SET available_seats = available_seats - 1 WHERE flight_id = ?&quot;;&#10;        String insertBooking = &quot;INSERT INTO bookings (user_id, flight_id, booking_date, status, food_preference, seat_preference, seat_number) VALUES (?, ?, NOW(), 'CONFIRMED', ?, ?, ?)&quot;;&#10;&#10;        Connection con = null;&#10;        try {&#10;            con = DatabaseConnection.getConnection();&#10;            if (con == null) return false;&#10;            con.setAutoCommit(false);&#10;&#10;            // Check flight availability&#10;            try (PreparedStatement ps = con.prepareStatement(selectFlightSql)) {&#10;                ps.setInt(1, flightId);&#10;                try (ResultSet rs = ps.executeQuery()) {&#10;                    if (!rs.next()) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ Flight not found.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    int seats = rs.getInt(&quot;available_seats&quot;);&#10;                    String status = rs.getString(&quot;status&quot;);&#10;                    if (!&quot;SCHEDULED&quot;.equalsIgnoreCase(status)) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ Flight is not available for booking (status=&quot; + status + &quot;).&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    if (seats &lt;= 0) {&#10;                        System.out.println(ConsoleColors.YELLOW + &quot;⚠️ No seats available.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Allocate seat: try preferred type first, otherwise any available seat&#10;            String chosenSeat = null;&#10;            if (seatPreference != null &amp;&amp; !seatPreference.isBlank()) {&#10;                try (PreparedStatement ps = con.prepareStatement(allocateSeatSqlPreferred)) {&#10;                    ps.setInt(1, flightId);&#10;                    ps.setString(2, seatPreference);&#10;                    try (ResultSet rs = ps.executeQuery()) {&#10;                        if (rs.next()) chosenSeat = rs.getString(&quot;seat_number&quot;);&#10;                    }&#10;                }&#10;            }&#10;            if (chosenSeat == null) {&#10;                try (PreparedStatement ps = con.prepareStatement(allocateSeatSqlAny)) {&#10;                    ps.setInt(1, flightId);&#10;                    try (ResultSet rs = ps.executeQuery()) {&#10;                        if (rs.next()) chosenSeat = rs.getString(&quot;seat_number&quot;);&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (chosenSeat == null) {&#10;                System.out.println(ConsoleColors.YELLOW + &quot;⚠️ No seat could be allocated.&quot; + ConsoleColors.RESET);&#10;                con.rollback();&#10;                return false;&#10;            }&#10;&#10;            // Mark seat as taken&#10;            try (PreparedStatement ps = con.prepareStatement(markSeatTakenSql)) {&#10;                ps.setInt(1, flightId);&#10;                ps.setString(2, chosenSeat);&#10;                ps.executeUpdate();&#10;            }&#10;&#10;            // Decrement available seats&#10;            try (PreparedStatement ups = con.prepareStatement(decrementSeats)) {&#10;                ups.setInt(1, flightId);&#10;                ups.executeUpdate();&#10;            }&#10;&#10;            // Insert booking with seat_number&#10;            try (PreparedStatement ins = con.prepareStatement(insertBooking, Statement.RETURN_GENERATED_KEYS)) {&#10;                ins.setInt(1, userId);&#10;                ins.setInt(2, flightId);&#10;                ins.setString(3, foodPreference);&#10;                ins.setString(4, seatPreference);&#10;                ins.setString(5, chosenSeat);&#10;                ins.executeUpdate();&#10;                try (ResultSet keys = ins.getGeneratedKeys()) {&#10;                    if (keys.next()) {&#10;                        int bookingId = keys.getInt(1);&#10;                        System.out.println(ConsoleColors.MAGENTA + &quot;️ Booking confirmed! ID: &quot; + bookingId + &quot; | Seat: &quot; + chosenSeat + ConsoleColors.RESET);&#10;                    }&#10;                }&#10;            }&#10;&#10;            con.commit();&#10;            return true;&#10;        } catch (Exception e) {&#10;            try { if (con != null) con.rollback(); } catch (Exception ignored) {}&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Booking failed: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            try { if (con != null) con.setAutoCommit(true); } catch (Exception ignored) {}&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    // Cancel booking by user (ensure ownership) and release seat if assigned&#10;    public boolean cancelBooking(int bookingId, int userId) {&#10;        String selectSql = &quot;SELECT booking_id, user_id, flight_id, status, seat_number FROM bookings WHERE booking_id = ?&quot;;&#10;        String updateBooking = &quot;UPDATE bookings SET status = 'CANCELLED' WHERE booking_id = ?&quot;;&#10;        String incrementSeat = &quot;UPDATE flights SET available_seats = available_seats + 1 WHERE flight_id = ?&quot;;&#10;        String releaseSeat = &quot;UPDATE flight_seats SET is_available = 1 WHERE flight_id = ? AND seat_number = ?&quot;;&#10;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel booking: no DB connection&quot; + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;        try {&#10;            con.setAutoCommit(false);&#10;&#10;            int flightId;&#10;            String currentSeat = null;&#10;            try (PreparedStatement ps = con.prepareStatement(selectSql)) {&#10;                ps.setInt(1, bookingId);&#10;                try (ResultSet rs = ps.executeQuery()) {&#10;                    if (!rs.next()) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ Booking not found.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    int owner = rs.getInt(&quot;user_id&quot;);&#10;                    if (owner != userId) {&#10;                        System.out.println(ConsoleColors.RED + &quot;❌ You are not authorized to cancel this booking.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                    String status = rs.getString(&quot;status&quot;);&#10;                    flightId = rs.getInt(&quot;flight_id&quot;);&#10;                    currentSeat = rs.getString(&quot;seat_number&quot;);&#10;                    if (&quot;CANCELLED&quot;.equalsIgnoreCase(status)) {&#10;                        System.out.println(ConsoleColors.YELLOW + &quot;⚠️ Booking already cancelled.&quot; + ConsoleColors.RESET);&#10;                        con.rollback();&#10;                        return false;&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mark booking cancelled&#10;            try (PreparedStatement ups = con.prepareStatement(updateBooking)) {&#10;                ups.setInt(1, bookingId);&#10;                ups.executeUpdate();&#10;            }&#10;&#10;            // Increment available seats in flights&#10;            try (PreparedStatement inc = con.prepareStatement(incrementSeat)) {&#10;                inc.setInt(1, flightId);&#10;                inc.executeUpdate();&#10;            }&#10;&#10;            // Release seat if one was assigned&#10;            if (currentSeat != null) {&#10;                try (PreparedStatement rel = con.prepareStatement(releaseSeat)) {&#10;                    rel.setInt(1, flightId);&#10;                    rel.setString(2, currentSeat);&#10;                    rel.executeUpdate();&#10;                }&#10;            }&#10;&#10;            con.commit();&#10;            System.out.println(ConsoleColors.GREEN + &quot;✅ Booking cancelled and seat released.&quot; + ConsoleColors.RESET);&#10;            return true;&#10;        } catch (Exception e) {&#10;            try { con.rollback(); } catch (Exception ignored) {}&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to cancel booking: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        } finally {&#10;            try { con.setAutoCommit(true); } catch (Exception ignored) {}&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;&#10;    public List&lt;Booking&gt; getBookingsByUser(int userId) {&#10;        List&lt;Booking&gt; out = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT b.booking_id, b.user_id, b.flight_id, b.booking_date, b.status, b.food_preference, b.seat_preference, b.seat_number, f.flight_number, f.flight_name, f.source, f.destination, f.departure_time, f.arrival_time, f.price FROM bookings b JOIN flights f ON b.flight_id = f.flight_id WHERE b.user_id = ?&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch bookings: no DB connection&quot; + ConsoleColors.RESET);&#10;            return out;&#10;        }&#10;        try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;            ps.setInt(1, userId);&#10;            try (ResultSet rs = ps.executeQuery()) {&#10;                while (rs.next()) {&#10;                    Booking b = new Booking(&#10;                        rs.getInt(&quot;booking_id&quot;),&#10;                        rs.getInt(&quot;user_id&quot;),&#10;                        rs.getInt(&quot;flight_id&quot;),&#10;                        rs.getString(&quot;booking_date&quot;),&#10;                        rs.getString(&quot;status&quot;),&#10;                        rs.getString(&quot;food_preference&quot;),&#10;                        rs.getString(&quot;seat_preference&quot;),&#10;                        rs.getString(&quot;seat_number&quot;),&#10;                        rs.getString(&quot;flight_number&quot;),&#10;                        rs.getString(&quot;flight_name&quot;),&#10;                        rs.getString(&quot;source&quot;),&#10;                        rs.getString(&quot;destination&quot;),&#10;                        rs.getString(&quot;departure_time&quot;),&#10;                        rs.getString(&quot;arrival_time&quot;),&#10;                        rs.getDouble(&quot;price&quot;)&#10;                    );&#10;                    out.add(b);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch bookings: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return out;&#10;    }&#10;&#10;    public List&lt;Booking&gt; getAllBookings() {&#10;        List&lt;Booking&gt; out = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT b.booking_id, b.user_id, b.flight_id, b.booking_date, b.status, b.food_preference, b.seat_preference, b.seat_number, f.flight_number, f.flight_name, f.source, f.destination, f.departure_time, f.arrival_time, f.price FROM bookings b JOIN flights f ON b.flight_id = f.flight_id&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch all bookings: no DB connection&quot; + ConsoleColors.RESET);&#10;            return out;&#10;        }&#10;        try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {&#10;            while (rs.next()) {&#10;                Booking b = new Booking(&#10;                    rs.getInt(&quot;booking_id&quot;),&#10;                    rs.getInt(&quot;user_id&quot;),&#10;                    rs.getInt(&quot;flight_id&quot;),&#10;                    rs.getString(&quot;booking_date&quot;),&#10;                    rs.getString(&quot;status&quot;),&#10;                    rs.getString(&quot;food_preference&quot;),&#10;                    rs.getString(&quot;seat_preference&quot;),&#10;                    rs.getString(&quot;seat_number&quot;),&#10;                    rs.getString(&quot;flight_number&quot;),&#10;                    rs.getString(&quot;flight_name&quot;),&#10;                    rs.getString(&quot;source&quot;),&#10;                    rs.getString(&quot;destination&quot;),&#10;                    rs.getString(&quot;departure_time&quot;),&#10;                    rs.getString(&quot;arrival_time&quot;),&#10;                    rs.getDouble(&quot;price&quot;)&#10;                );&#10;                out.add(b);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch all bookings: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return out;&#10;    }&#10;&#10;    public List&lt;Passenger&gt; getAllPassengers() {&#10;        List&lt;Passenger&gt; out = new ArrayList&lt;&gt;();&#10;        String sql = &quot;SELECT user_id, name, email, passport_number, contact_number FROM users WHERE role = 'PASSENGER'&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch passengers: no DB connection&quot; + ConsoleColors.RESET);&#10;            return out;&#10;        }&#10;        try (Statement st = con.createStatement(); ResultSet rs = st.executeQuery(sql)) {&#10;            while (rs.next()) {&#10;                Passenger p = new Passenger(rs.getInt(&quot;user_id&quot;), rs.getString(&quot;name&quot;), rs.getString(&quot;email&quot;), rs.getString(&quot;passport_number&quot;), rs.getString(&quot;contact_number&quot;));&#10;                out.add(p);&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to fetch passengers: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;        return out;&#10;    }&#10;&#10;    public void generateReport() {&#10;        String sqlFlights = &quot;SELECT COUNT(*) AS cnt FROM flights&quot;;&#10;        String sqlPassengers = &quot;SELECT COUNT(*) AS cnt FROM users WHERE role = 'PASSENGER'&quot;;&#10;        String sqlBookings = &quot;SELECT COUNT(*) AS cnt FROM bookings&quot;;&#10;        Connection con = DatabaseConnection.getConnection();&#10;        if (con == null) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to generate report: no DB connection&quot; + ConsoleColors.RESET);&#10;            return;&#10;        }&#10;        try (Statement st = con.createStatement()) {&#10;            try (ResultSet rf = st.executeQuery(sqlFlights)) { if (rf.next()) System.out.println(ConsoleColors.MAGENTA + &quot; Total Flights = &quot; + rf.getInt(&quot;cnt&quot;) + ConsoleColors.RESET); }&#10;            try (ResultSet ru = st.executeQuery(sqlPassengers)) { if (ru.next()) System.out.println(ConsoleColors.MAGENTA + &quot; Total Passengers = &quot; + ru.getInt(&quot;cnt&quot;) + ConsoleColors.RESET); }&#10;            try (ResultSet rb = st.executeQuery(sqlBookings)) { if (rb.next()) System.out.println(ConsoleColors.MAGENTA + &quot; Total Bookings = &quot; + rb.getInt(&quot;cnt&quot;) + ConsoleColors.RESET); }&#10;            System.out.println(ConsoleColors.GREEN + &quot; Report generated successfully!&quot; + ConsoleColors.RESET);&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Failed to generate report: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        } finally {&#10;            DatabaseConnection.closeQuietly(con);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/flightmanagement/Passenger.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/flightmanagement/Passenger.java" />
              <option name="originalContent" value="package flightmanagement;&#10;&#10;import java.sql.*;&#10;import java.util.List;&#10;&#10;public class Passenger extends User {&#10;    // password used only during registration/login flows&#10;    public Passenger(String name, String email, String password, String passportNumber, String contactNumber) {&#10;        super();&#10;        this.name = name;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.passportNumber = passportNumber;&#10;        this.contactNumber = contactNumber;&#10;        this.role = &quot;PASSENGER&quot;;&#10;    }&#10;&#10;    public Passenger(int userId, String name, String email, String passportNumber, String contactNumber) {&#10;        super(userId, name, email, passportNumber, contactNumber, &quot;PASSENGER&quot;);&#10;    }&#10;&#10;    // Registers this passenger into the `users` table&#10;    public boolean registerUser() {&#10;        String sql = &quot;INSERT INTO users (name, email, password, passport_number, contact_number, role) VALUES (?, ?, ?, ?, ?, 'PASSENGER')&quot;;&#10;        try (Connection con = DatabaseConnection.getConnection()) {&#10;            if (con == null) {&#10;                System.out.println(ConsoleColors.RED + &quot;❌ Cannot register user: no DB connection&quot; + ConsoleColors.RESET);&#10;                return false;&#10;            }&#10;            String hashed = PasswordUtil.hashPassword(this.password);&#10;            try (PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;                ps.setString(1, this.name);&#10;                ps.setString(2, this.email);&#10;                ps.setString(3, hashed);&#10;                ps.setString(4, this.passportNumber);&#10;                ps.setString(5, this.contactNumber);&#10;                ps.executeUpdate();&#10;                try (ResultSet keys = ps.getGeneratedKeys()) {&#10;                    if (keys.next()) this.userId = keys.getInt(1);&#10;                }&#10;                System.out.println(ConsoleColors.GREEN + &quot;✅ Registration successful! Welcome aboard, &quot; + this.name + &quot;!&quot; + ConsoleColors.RESET);&#10;                return true;&#10;            }&#10;        } catch (SQLIntegrityConstraintViolationException e) {&#10;            System.out.println(ConsoleColors.YELLOW + &quot;⚠️ Email already registered: &quot; + this.email + ConsoleColors.RESET);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Registration failed: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Authenticate a passenger. Returns Passenger object if successful, otherwise null.&#10;    public static Passenger loginUser(String email, String password) {&#10;        String sql = &quot;SELECT user_id, name, email, password, passport_number, contact_number FROM users WHERE email = ? AND role = 'PASSENGER'&quot;;&#10;        try (Connection con = DatabaseConnection.getConnection()) {&#10;            if (con == null) {&#10;                System.out.println(ConsoleColors.RED + &quot;❌ Cannot login: no DB connection&quot; + ConsoleColors.RESET);&#10;                return null;&#10;            }&#10;            try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;                ps.setString(1, email);&#10;                try (ResultSet rs = ps.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        String stored = rs.getString(&quot;password&quot;);&#10;                        boolean ok = false;&#10;                        if (stored != null &amp;&amp; stored.startsWith(&quot;PBKDF2$&quot;)) {&#10;                            ok = PasswordUtil.verifyPassword(stored, password);&#10;                        } else {&#10;                            ok = stored != null &amp;&amp; stored.equals(password);&#10;                        }&#10;                        if (ok) {&#10;                            Passenger p = new Passenger(rs.getInt(&quot;user_id&quot;), rs.getString(&quot;name&quot;), rs.getString(&quot;email&quot;), rs.getString(&quot;passport_number&quot;), rs.getString(&quot;contact_number&quot;));&#10;                            System.out.println(ConsoleColors.GREEN + &quot;✅ Login successful! Welcome back, &quot; + p.getName() + &quot;!&quot; + ConsoleColors.RESET);&#10;                            return p;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Login failed: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        }&#10;        System.out.println(ConsoleColors.RED + &quot;❌ Invalid email or password.&quot; + ConsoleColors.RESET);&#10;        return null;&#10;    }&#10;&#10;    public void viewAvailableFlights() {&#10;        BookingService service = new BookingService();&#10;        service.viewFlights();&#10;    }&#10;&#10;    public boolean bookFlight(int flightId) {&#10;        BookingService service = new BookingService();&#10;        return service.createBooking(this.userId, flightId);&#10;    }&#10;&#10;    public boolean cancelBooking(int bookingId) {&#10;        BookingService service = new BookingService();&#10;        return service.cancelBooking(bookingId, this.userId);&#10;    }&#10;&#10;    public List&lt;Booking&gt; viewMyBookings() {&#10;        BookingService service = new BookingService();&#10;        return service.getBookingsByUser(this.userId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package flightmanagement;&#10;&#10;import java.sql.*;&#10;import java.util.List;&#10;&#10;public class Passenger extends User {&#10;    // password used only during registration/login flows&#10;    public Passenger(String name, String email, String password, String passportNumber, String contactNumber) {&#10;        super();&#10;        this.name = name;&#10;        this.email = email;&#10;        this.password = password;&#10;        this.passportNumber = passportNumber;&#10;        this.contactNumber = contactNumber;&#10;        this.role = &quot;PASSENGER&quot;;&#10;    }&#10;&#10;    public Passenger(int userId, String name, String email, String passportNumber, String contactNumber) {&#10;        super(userId, name, email, passportNumber, contactNumber, &quot;PASSENGER&quot;);&#10;    }&#10;&#10;    // Registers this passenger into the `users` table&#10;    public boolean registerUser() {&#10;        String sql = &quot;INSERT INTO users (name, email, password, passport_number, contact_number, role) VALUES (?, ?, ?, ?, ?, 'PASSENGER')&quot;;&#10;        try (Connection con = DatabaseConnection.getConnection()) {&#10;            if (con == null) {&#10;                System.out.println(ConsoleColors.RED + &quot;❌ Cannot register user: no DB connection&quot; + ConsoleColors.RESET);&#10;                return false;&#10;            }&#10;            String hashed = PasswordUtil.hashPassword(this.password);&#10;            try (PreparedStatement ps = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {&#10;                ps.setString(1, this.name);&#10;                ps.setString(2, this.email);&#10;                ps.setString(3, hashed);&#10;                ps.setString(4, this.passportNumber);&#10;                ps.setString(5, this.contactNumber);&#10;                ps.executeUpdate();&#10;                try (ResultSet keys = ps.getGeneratedKeys()) {&#10;                    if (keys.next()) this.userId = keys.getInt(1);&#10;                }&#10;                System.out.println(ConsoleColors.GREEN + &quot;✅ Registration successful! Welcome aboard, &quot; + this.name + &quot;!&quot; + ConsoleColors.RESET);&#10;                return true;&#10;            }&#10;        } catch (SQLIntegrityConstraintViolationException e) {&#10;            System.out.println(ConsoleColors.YELLOW + &quot;⚠️ Email already registered: &quot; + this.email + ConsoleColors.RESET);&#10;            return false;&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Registration failed: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Authenticate a passenger. Returns Passenger object if successful, otherwise null.&#10;    public static Passenger loginUser(String email, String password) {&#10;        String sql = &quot;SELECT user_id, name, email, password, passport_number, contact_number FROM users WHERE email = ? AND role = 'PASSENGER'&quot;;&#10;        try (Connection con = DatabaseConnection.getConnection()) {&#10;            if (con == null) {&#10;                System.out.println(ConsoleColors.RED + &quot;❌ Cannot login: no DB connection&quot; + ConsoleColors.RESET);&#10;                return null;&#10;            }&#10;            try (PreparedStatement ps = con.prepareStatement(sql)) {&#10;                ps.setString(1, email);&#10;                try (ResultSet rs = ps.executeQuery()) {&#10;                    if (rs.next()) {&#10;                        String stored = rs.getString(&quot;password&quot;);&#10;                        boolean ok = false;&#10;                        if (stored != null &amp;&amp; stored.startsWith(&quot;PBKDF2$&quot;)) {&#10;                            ok = PasswordUtil.verifyPassword(stored, password);&#10;                        } else {&#10;                            ok = stored != null &amp;&amp; stored.equals(password);&#10;                        }&#10;                        if (ok) {&#10;                            Passenger p = new Passenger(rs.getInt(&quot;user_id&quot;), rs.getString(&quot;name&quot;), rs.getString(&quot;email&quot;), rs.getString(&quot;passport_number&quot;), rs.getString(&quot;contact_number&quot;));&#10;                            System.out.println(ConsoleColors.GREEN + &quot;✅ Login successful! Welcome back, &quot; + p.getName() + &quot;!&quot; + ConsoleColors.RESET);&#10;                            return p;&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(ConsoleColors.RED + &quot;❌ Login failed: &quot; + e.getMessage() + ConsoleColors.RESET);&#10;        }&#10;        System.out.println(ConsoleColors.RED + &quot;❌ Invalid email or password.&quot; + ConsoleColors.RESET);&#10;        return null;&#10;    }&#10;&#10;    public void viewAvailableFlights() {&#10;        BookingService service = new BookingService();&#10;        service.viewFlights();&#10;    }&#10;&#10;    // Book flight without preferences (backwards compatible)&#10;    public boolean bookFlight(int flightId) {&#10;        BookingService service = new BookingService();&#10;        return service.createBooking(this.userId, flightId, null, null);&#10;    }&#10;&#10;    // New: Book flight with food and seat preferences&#10;    public boolean bookFlight(int flightId, String foodPreference, String seatPreference) {&#10;        BookingService service = new BookingService();&#10;        return service.createBooking(this.userId, flightId, foodPreference, seatPreference);&#10;    }&#10;&#10;    public boolean cancelBooking(int bookingId) {&#10;        BookingService service = new BookingService();&#10;        return service.cancelBooking(bookingId, this.userId);&#10;    }&#10;&#10;    public List&lt;Booking&gt; viewMyBookings() {&#10;        BookingService service = new BookingService();&#10;        return service.getBookingsByUser(this.userId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>